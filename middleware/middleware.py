from aiogram import Dispatcher
from aiogram.dispatcher.handler import CancelHandler 
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware
from aiogram.types import Message, CallbackQuery
from loader import db
import time
import keyboards.keyboard as kb

user_ban_status = {}

class UserBanned(BaseMiddleware):
    async def on_process_message(self, message: Message, data: dict):

        if not message.from_user.username:
            await message.answer("<b>–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±—è –ø—É—Å—Ç–∏—Ç—å –¥–∞–ª—å—à–µ, —É —Ç–µ–±—è –Ω–µ—Ç @username</b>")
            raise CancelHandler

        user_id = message.from_user.id
        if user_id in user_ban_status:
            is_banned = user_ban_status[user_id]
        else:
            is_banned = db.get("SELECT ban FROM users WHERE userid = ?", (user_id, ))[0]
            user_ban_status[user_id] = is_banned

        if is_banned == 1:
            await message.answer('<b>üî• –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
            raise CancelHandler

    async def on_process_callback_query(self, call: CallbackQuery, data: dict):
        pass

        if not call.from_user.username:
            await call.answer("<b>–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±—è –ø—É—Å—Ç–∏—Ç—å –¥–∞–ª—å—à–µ, —É —Ç–µ–±—è –Ω–µ—Ç @username</b>", show_alert=True)
            raise CancelHandler

        user_id = call.from_user.id
        if user_id in user_ban_status:
            is_banned = user_ban_status[user_id]
        else:
            is_banned = db.get("SELECT ban FROM users WHERE userid = ?", (user_id, ))[0]
            user_ban_status[user_id] = is_banned

        if is_banned == 1:
            await call.answer('<b>üî• –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
            raise CancelHandler
            
            
class UserSpam(LifetimeControllerMiddleware):
    MAX_MESSAGES_PER_MINUTE = 5
    TIME_RANGE_IN_SECONDS = 60

    def __init__(self):
        super().__init__()

        self.user_messages_count = {}

    async def on_pre_process_message(self, message: Message, data: dict):
        user_id = message.from_user.id
        current_time = time.time()

        if user_id not in self.user_messages_count:
            self.user_messages_count[user_id] = []

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞
        self.user_messages_count[user_id] = list(filter(
            lambda timestamp: timestamp > current_time - self.TIME_RANGE_IN_SECONDS,
            self.user_messages_count[user_id]))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
        self.user_messages_count[user_id].append(current_time)

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(self.user_messages_count[user_id]) > self.MAX_MESSAGES_PER_MINUTE:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            raise CancelHandler
